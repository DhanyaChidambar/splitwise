<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($rootScope,$scope,spUtil) {
	/* widget controller */
	var c = this;
	c.data.newgroup={};
	c.data.newexpense={};
	c.data.newexpense.shares={};
	c.data.newgroup.members=[];
	c.data.showSettledMessage=false;
	c.data.newexpense.split_type_value="Equally with everyone";
	c.data.showActions = false;
	c.data.oldexpense = {};
	c.data.expenseOp='';
	c.data.getUsersByRoleQuery='roles=x_881767_splitwise.user^ORroles=x_881767_splitwise.admin';


	$scope.member = {
		name: 'member'

	};
	$scope.editedMember = {
		name: 'editedMember'

	};

	$scope.groupMember = {
		name :  'groupMember',
		displayValue:c.data.newexpense.paid_by,
		value: c.data.newexpense.paid_by_sys_id
	}

	var displayDashBoard = function(data){

		console.log("data is"+data);
		c.server.get({
			action: data
		}).then(function(r) {
			c.data.balance = r.data.totals.balance;
			c.data.owed = r.data.totals.owed;
			c.data.owe = r.data.totals.owe;
		});
	}


	c.data.action="dashboard";
	displayDashBoard(c.data.action);
	//getWidget();
	$scope.$on("field.change", function(evt, parms) {
		if (parms.field.name == 'member'){
			var member = {};
			member.name=parms.displayValue;
			member.id=parms.newValue;
			c.data.newgroup.members.push(member);
			console.log(parms);
			console.log(c.data.newgroup.members);
		}else if(parms.field.name == 'groupMember'){
			console.log(parms);
			c.data.newexpense.paid_by=parms.newValue;
		}else if(parms.field.name=='editedMember'){
			c.data.currentGroup.involved.push(parms.newValue);
		}


	});

	var getUserGroupIdForCurrentUser = function(data){
		c.server.get({
			action: "getCurrentUserInUG",
			groupId:data
		}).then(function(r) {
			console.log(" usergroup id "+r.data.userGroupId);
			var groupData={};
			groupData.userGroupId=r.data.userGroupId;
			groupData.groupId=data;
			$rootScope.$broadcast('gotUserGroupId',groupData);

		});
	}

	var displayCurrentGroup = function(data){

		console.log("data is"+data);

		c.server.get({
			action: 'getGroupDetails',
			groupId:data
		}).then(function(r) {
			console.log(r.data);
			c.data.group_balance = r.data.totals.group_balance;
			if(c.data.group_balance>0){
				c.data.group_status='owed';
			}else if(c.data.group_balance<0){
				c.data.group_balance=0-c.data.group_balance;
				c.data.group_status='owes';
			}else{
				c.data.group_status='settled';
			}
		});
	}

	var displayGroupMembers = function(groupId){
		c.server.get({
			action: 'getGroupMembers',
			groupId:groupId
		}).then(function(r) {
			console.log(r.data);

			c.data.nmembers=r.data.nmembers;
		});
	}

	var displayGroupExpenses= function(groupId){
		getUserGroupIdForCurrentUser(groupId);
	}

	$rootScope.$on('gotUserGroupId',function(event,data){
		console.log("input.userGroupId "+data);
		c.server.get({
			action: 'getGroupExpenses',
			groupId:data.groupId,
			userGroupId:data.userGroupId
		}).then(function(r) {
			console.log(r.data);
			c.data.expenses = r.data.expenses;
			//u_user_share_pairLIKE221e42d6470e9110e292f2e7536d43fd
			//c.data.group_owed = r.data.totals.group_owed;
			//c.data.group_owe = r.data.totals.group_owe;
		});
	});

	$rootScope.$on('openDashboard',function(event,data){
		c.data.action="dashboard";

		displayDashBoard(data);
	});
	$rootScope.$on('showGroupPage',function(event,data){
		c.data.action = 'showGroupPage';
		c.data.groupName = data.groupName;
		c.data.groupId=data.groupId;
		console.log("about to open group "+c.data.groupId+" "+c.data.groupName);
		displayCurrentGroup(data.groupId);
		displayGroupMembers(data.groupId);
		displayGroupExpenses(data.groupId);
		c.data.getUsersByGroupQuery='group.sys_id='+data.groupId;
		c.data.newexpense.split_type_value='Equally with everyone';


	});


	c.loadCurrentGroup =function(){
		//c.data.action = 'editGroup';
		c.data.currentGroup={};
		c.data.currentGroup.name = c.data.groupName;
		c.data.currentGroup.groupId=c.data.groupId;
		//console.log("about to open group "+c.data.groupId+" "+c.data.groupName);
		//c.data.currentGroup.members=data.members;
		c.data.getUsersByRoleQuery='roles=x_881767_splitwise.user^ORroles=x_881767_splitwise.admin';
		c.server.get({
			action: 'getGroupMembers',
			groupId:c.data.currentGroup.groupId
		}).then(function(r) {
			console.log(r.data);


			c.data.currentGroup.involved =[];
			c.data.currentGroup.members = [];
			//r.data.nmembers;
			for(var i=0;i<r.data.nmembers.length;i++){
				c.data.currentGroup.involved.push(r.data.nmembers[i].member.sys_id);
				var member={};
				member.name=r.data.nmembers[i].member.name;
				member.sys_id=r.data.nmembers[i].member.sys_id;
				member.balance=r.data.nmembers[i].member.balance;
				c.data.currentGroup.members.push(member);
			}
		});
	}



	c.removeMember = function(member){
		console.log("about to remove "+member);
		//c.data.members.remove(member);
		var index = c.data.newgroup.members.indexOf(member);
		if (index >= 0) {
			c.data.newgroup.members.splice( index, 1 );
		}
	}

	c.editMember = function(member){
		console.log("about to edit "+member);
		if(member.balance!=0){
			spUtil.addErrorMessage("only members whose balance is zero can be removed!! Settle up the balance and try again.")
			return;
		}
		//c.data.members.remove(member);
		var index = c.data.currentGroup.involved.indexOf(member.sys_id);
		if (index >= 0) {
			c.data.currentGroup.involved.splice( index, 1 );
		}
		var membersIndex = c.data.currentGroup.members.indexOf(member);
		if (membersIndex >= 0) {
			c.data.currentGroup.members.splice( index, 1 );
		}
	}

	c.createGroup = function(){
		console.log('group name ',c.data.newgroup.name);
		console.log('members ',c.data.newgroup.members);
		c.server.get({
			action:'createGroup',
			members:c.data.newgroup.members,
			name:c.data.newgroup.name
		}).then(function(r){
			console.log("success");
			spUtil.addInfoMessage("Successfully Created the group "+c.data.newgroup.name);
			c.data.newgroup={};
			c.data.newgroup.members=[];
		});
	}

	c.editGroup = function(){
		console.log('group name ',c.data.currentGroup.name);
		console.log('members ',c.data.currentGroup.members);
		c.data.currentGroup.showModal=false;
		c.server.get({
			action:'editGroup',
			members:c.data.currentGroup.involved.toString(),
			name:c.data.currentGroup.name,
			groupId:c.data.currentGroup.groupId
		}).then(function(r){
			console.log("success");
			spUtil.addInfoMessage("Successfully Updated the group "+c.data.currentGroup.name);
			c.data.currentGroup={};
			c.data.currentGroup.involved=[];
			c.data.currentGroup.members=[];

		});
	}

	c.createExpense = function(){
		console.log('group id '+c.data.groupId+' '+c.data.members);
		if(c.data.oldexpense.amount!=c.data.newexpense.amount
			 && c.data.newexpense.split_type_value!='Equally with everyone' && c.data.newexpense.split_type_value!='Equally among some' ){
			if(!c.data.newexpense.shares){
				spUtil.addErrorMessage(" Update the share accordingly");
				return;
			}
		}
		if(c.data.newexpense.shares && Object.keys(c.data.newexpense.shares).length!=0){
			if(c.data.newexpense.split_type_value=='Equally among some'){
				if(Object.keys(c.data.newexpense.shares).length==0){
					spUtil.addErrorMessage(" At least one user must be part of the expense, add members involved");
					return;
				}

			}
			else if(c.data.newexpense.split_type_value=='By exact share'){
				var total=0;
				for(var i=0;i<Object.keys(c.data.newexpense.shares).length;i++){
					if(c.data.newexpense.shares[Object.keys(c.data.newexpense.shares)[i]]){
						total=parseFloat(total)+parseFloat(c.data.newexpense.shares[Object.keys(c.data.newexpense.shares)[i]]);
					}

				}
				if(total!=c.data.newexpense.amount){
					spUtil.addErrorMessage(" Total of shares do not sum up to the amount spent, please modify accordingly");
					return;
				}

			}
			else if(c.data.newexpense.split_type_value=='By percentage'){
				var total=0;
				for(var i=0;i<Object.keys(c.data.newexpense.shares).length;i++){
					if(c.data.newexpense.shares[Object.keys(c.data.newexpense.shares)[i]]){
						total=total+parseFloat(c.data.newexpense.shares[Object.keys(c.data.newexpense.shares)[i]]);	
					}

				}
				if(total!=100){
					spUtil.addErrorMessage(" Total % shares do not sum up to the amount spent, please modify accordingly");
					return;
				}
			}	


		}
		else if(c.data.oldexpense.shares && Object.keys(c.data.oldexpense.shares).length!=0 && c.data.newexpense.split_type_value!='Equally among some'){
			var total=0;
			for(var i=0;i<Object.keys(c.data.oldexpense.shares).length;i++){
				if(c.data.oldexpense.shares[Object.keys(c.data.oldexpense.shares)[i]]){
					total=parseFloat(total)+parseFloat(c.data.oldexpense.shares[Object.keys(c.data.oldexpense.shares)[i]]);
				}

			}
			if(total!=c.data.newexpense.amount){
				spUtil.addErrorMessage(" Total of shares do not sum up to the amount spent, please modify accordingly");
				return;
			}

		}

		if(c.data.expenseOp=='edit'){
			c.server.get({
				action:'editExpense',
				newexpense:c.data.newexpense,
				oldexpense:c.data.oldexpense,
				splitOption:c.data.newexpense.split_type_value,
				groupId:c.data.groupId,
				shares:c.data.newexpense.shares,
				expenseId:c.data.oldexpense.sys_id,
				members:c.data.nmembers
			}).then(function(r){
				spUtil.addInfoMessage("Expense updated successfully");
				c.data.newexpense={}
				c.data.expenseOp='';
				c.data.oldexpense={};
			});
		}
		else{


			c.server.get({
				action:'createExpense',
				expenseData:c.data.newexpense,
				splitOption:c.data.newexpense.split_type_value,
				groupId:c.data.groupId,
				shares:c.data.newexpense.shares,
				members:c.data.nmembers
			}).then(function(r){
				spUtil.addInfoMessage("New Expense created");
				c.data.newexpense={}
				c.data.expenseOp='';
				c.data.oldexpense={};
			});
		}
	}


	c.showSplitOption = function(value){
		c.data.newexpense.split_type_value=value;
		c.data.newexpense.shares={};
	}

	c.loadSettlement = function(){
		c.data.settlementMessage ='';
		c.data.mySettlement=[];
		c.server.get({
			action:'loadSettlement',
			groupId:c.data.groupId
		}).then(function(r){
			if(r.data.settlementMessage){
				c.data.settlementMessage=r.data.settlementMessage;

			}
			c.data.mySettlement=r.data.mySettlement;
		})
	}

	c.acceptPayment = function(settle,index){
		c.server.get({
			action:'acceptPayment',
			settled:settle,
			groupId:c.data.groupId
		}).then(function(r){
			if(r.data.accept_success==true){
				c.data.mySettlement[index].settled=1;
				spUtil.addInfoMessage("Accepted payment of Rs. "+settle.amount+" from "+settle.from);
			}
		});
	}

	c.recordPayment = function(settle,index){
		c.server.get({
			action:'recordPayment',
			settled:settle,
			groupId:c.data.groupId
		}).then(function(r){
			if(r.data.accept_success==true){
				c.data.mySettlement[index].settled=1;
				spUtil.addInfoMessage("Recorded payment of Rs. "+settle.amount+" to "+settle.to);
			}
		});
	}

	c.deleteExpense = function(){
		console.log(" Expense we are going to delete "+c.data.expenseToBeDeleted);
		c.server.get({
			action:'deleteExpense',
			expenseId:c.data.expenseToBeDeleted
		}).then(function(r){
			spUtil.addInfoMessage(' Successfully deleted');
		});
	}

	c.deleteGroup = function(){
		c.server.get({
			action:'deleteGroup',
			groupId:c.data.currentGroup.groupId
		}).then(function(r){
			spUtil.addInfoMessage(' Successfully deleted the group');
		});
	}

	c.loadCurrentData =function(expense){
		c.data.edit_create_label='Edit expense';
		c.data.newexpense.name = expense.name;
		c.data.newexpense.amount=expense.amount;
		c.data.newexpense.share=expense.share;
		c.data.newexpense.paid_by=expense.paid_by_sys_id;
		$scope.groupMember.value=expense.paid_by_sys_id;
		$scope.groupMember.displayValue=expense.paid_by;
		$scope.groupMember = {
			displayValue: expense.paid_by,
			value: expense.paid_by_sys_id,
			name: 'groupMember'
		};
		c.data.newexpense.involvedMemebrs=expense.involvedMemebrs;
		c.data.newexpense.split_type_value=expense.split_type_value;

		c.data.oldexpense=expense;
		console.log(c.data.oldexpense);
		c.data.expenseOp='edit';
	}

	c.clearPreviousEntries = function(){
		c.data.edit_create_label='Add new expense';
		c.data.newexpense={};
		c.data.oldexpense={};
		c.data.newexpense.split_type_value='Equally with everyone';
		$scope.groupMember = {
			displayValue: null,
			value: null,
			name: 'groupMember'
		};
	}
	c.loadTeBeDeleted = function(exp){
		c.data.expenseToBeDeleted=exp.sys_id;
	}

}

]]></client_script>
        <controller_as>c</controller_as>
        <css>.group-header{
  color:black;
}
.btn-orange{
  background: #ff652f;
  color: #fff;
  text-shadow: 0 -1px 0 #c83400;
}
.btn-mint {
  background: #5bc5a7;
  color: #fff;
  text-shadow: 0 -1px 0 #318970;
}
.btn-edit{
  background: blue;
  color: #fff;
  text-shadow: 0 -1px 0 #318970;
}
.button-container{
  margin-top: 2rem;
  margin-bottom: 1rem;
  text-align:right;
}
.dashboard-totals{
  text-align:center;
}
.members-header{
  margin-top:2em; 
}
.members-list{
  margin-bottom:0;
}

.new-group-container{
  //height: 25em;
}

.new-expense-container{
  // height: 25em;
}

.setllement{
  width:100%;
}

.btn-settle{
  float:right;
}

.all_settled-label{
  text-align: center;
  width: 100%;
  font-size: 30px;
  color: green;
}
.delete-icon{
  float: right;
  font-size: medium;
}

.edit-icon{
  font-size: medium;
  margin-left: 4em;
}

.dashboard-total{
  border-right: dotted;
  border-top: dotted;
  margin-left: 15px;
  width: 30%;
}

.dashboard-owed{
  border-top: dotted;
  width: 32%;

}

.dashboard-owe{

  border-right: dotted;
  border-top: dotted;
  width: 35%;

}

.dashboard-header{
  border: ridge;
}

</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>splitwise_content</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Splitwise Content</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	//create an array to populate with notes
	if (input && input.action) {
		if (input.action == 'dashboard') {

			data.totals = {};
			var usergroup = new GlideRecord('x_881767_splitwise_user_group');
			usergroup.addQuery('user.sys_id',gs.getUser().getID());
			usergroup.query();
			data.totals.balance = 0;
			data.totals.owe = 0;
			data.totals.owed = 0;
			while (usergroup.next()) {
				//var spent=usergroup.getAggregate('SUM','spent');
				//var share=usergroup.getAggregate('SUM','share');
				console.log("current = "+usergroup.getValue('balance'));
				var balance = parseFloat(usergroup.getValue('balance'));
				data.totals.balance=parseFloat(data.totals.balance)+balance;
				if(balance>0){
					data.totals.owed=parseFloat(data.totals.owed)+balance;
				}else{
					data.totals.owe=parseFloat(data.totals.owe)+balance;

				}
				console.log(" balance "+balance+" note "+usergroup.group.group_name);
			}
			data.totals.balance=data.totals.balance?data.totals.balance.toFixed(2):0;
			data.totals.owed=data.totals.owed?data.totals.owed.toFixed(2):0;
			data.totals.owes=data.totals.owes?data.totals.owes.toFixed(2):0;


		}
		else if(input.action=='getGroupDetails'){
			//updateSettlementDetails(input.groupId);
			data.totals = {};
			var usergroup = new GlideAggregate('x_881767_splitwise_user_group');
			usergroup.addQuery('user.sys_id',gs.getUser().getID());
			usergroup.addQuery('group',input.groupId);
			usergroup.query();
			console.log(" query "+input.groupId+" "+usergroup.getRowCount())
			data.totals.group_balance = 0;
			if(usergroup.next()){
				console.log(" inside if of ussergrouyp query");
				var balance = parseFloat(usergroup.getValue('balance'));
				data.totals.group_balance=balance;
				console.log('group balance is '+balance);
			}

		}
		else if(input.action=='getGroupMembers'){
			//data.members= [];
			data.nmembers=[];
			var userRecord=new GlideRecord('x_881767_splitwise_user_group');
			console.log(" group is "+input.groupId);
			userRecord.addQuery('group.sys_id',input.groupId);
			userRecord.query();
			console.log("rows "+userRecord.getRowCount());

			while(userRecord.next()){
				var member={};
				member.name=userRecord.getDisplayValue('user');
				member.sys_id=userRecord.getValue('user');
				member.ug_id=userRecord.getValue('sys_id');
				member.balance=userRecord.getValue('balance');
				//console.log("user.user "+member.sys_id+" group.sys_id "+input.groupId)
				//var noteGR = new GlideAggregate('x_881767_splitwise_user_expense');
				//noteGR.addQuery('user.user',member.sys_id);
				//noteGR.addAggregate('SUM', 'spent');
				//noteGR.addAggregate('SUM', 'share');
				//noteGR.addQuery('group.sys_id',input.groupId);
				//noteGR.query();
				//member.totals={};
				//member.totals.group_balance = 0;
				//member.totals.group_owe = 0;
				//member.totals.group_owed = 0;
				//while (noteGR.next()) {
				//var spent=noteGR.getAggregate('SUM','spent');
				//var share=noteGR.getAggregate('SUM','share');
				//var balance = spent-share;
				//member.totals.group_balance=member.totals.group_balance+balance;
				//if(balance>0){
				//member.totals.group_owed=member.totals.group_owed+balance;
				//}else{
				//member.totals.group_owe=member.totals.group_owe+balance;

				//}
				//console.log("spent "+spent+" share "+share+" balance "+balance+" note "+noteGR.group.group_name);
				//}
				//data.members.push(member);

				var currentMemberData={};
				currentMemberData.member=member;
				var settlement=loadSettlementForCurrentUserAndGroup(member.sys_id,input.groupId);
				currentMemberData.settlement=settlement;
				data.nmembers.push(currentMemberData);


			}
			console.log("settlemeent details "+JSON.stringify(data.nmembers));
		}
		else if(input.action=='getGroupExpenses'){
			data.expenses=[];
			var expGR=new GlideRecord('x_881767_splitwise_expense');
			expGR.addQuery('group.sys_id',input.groupId);
			expGR.query();
			while(expGR.next()){
				var exp={};
				exp.sys_id=expGR.getValue('sys_id');
				exp.name=expGR.getValue('u_name');
				exp.amount=expGR.getValue('amount');
				exp.paid_by=expGR.getDisplayValue('paid_by');
				exp.paid_by_sys_id=expGR.getDisplayValue('paid_by.sys_id');
				exp.split_type_value=expGR.getValue('split_type');
				console.log('u_share_pair'+expGR.getValue('u_user_share_pair'));
				exp.involvedMemebrs=expGR.getValue('u_user_share_pair');
				exp.myShare=0;
				var shares={};
				exp.shares ={};
				//if(expGR.getValue('u_user_share_pair').contains(input.userGroupId)){
				var userExpGR=new GlideRecord('x_881767_splitwise_user_expense');
				//userExpGR.addQuery('expense.sys_id='+expGR.sys_id+'^user.sys_id='+input.userGroupId);
				userExpGR.addQuery('expense',expGR.sys_id);

				userExpGR.query();
				console.log(" expense "+expGR.sys_id+" "+userExpGR.getRowCount());
				while(userExpGR.next()){
					//var share=userExpGR.getValue('share');
					//if(expGR.getValue('paid_by')==input.userGroupId){
					//exp.myShare=exp.amount-share;	
					//}else{
					//exp.myShare=0-share;	
					//}
					console.log(" inside the loop "+userExpGR.getValue('user')+','+userExpGR.user.user);
					if(userExpGR.getValue('user')==input.userGroupId){
						exp.myShare=userExpGR.getValue('u_balance');	
					}
					var key=userExpGR.getValue('user')+','+userExpGR.user.user;
					shares[key]=userExpGR.getValue('share');
					console.log("shares "+shares+ " "+shares.length);
				}
				//}

				exp.date=expGR.getDisplayValue('sys_created_on').slice(0,10);
				exp.shares=shares;
				data.expenses.push(exp);
			}
			console.log("expenses "+data.expenses+' '+input.groupId+" "+input.userGroupId);
		}
		else if(input.action=='allExpenses'){

		}
		else if(input.action=='getCurrentUserInUG'){
			//data.userGrp={}
			var ug=new GlideRecord('x_881767_splitwise_user_group');
			ug.addEncodedQuery('user.sys_id='+gs.getUser().getID()+'^group.sys_id='+input.groupId);
			ug.query();
			if(ug.next()){
				var id=ug.getValue('sys_id');
				console.log(" UG Id "+ug.getValue('sys_id')+" ");
				data.userGroupId=id.toString();
			}
			console.log(data.userGroupId);
		}
		else if(input.action=='createGroup'){
			var grp=new GlideRecord('x_881767_splitwise_expense_group');
			grp.setValue('group_name',input.name);
			var members=[];
			for(var i=0;i<input.members.length;i++){
				members.push(input.members[i].id);
			}
			grp.setValue('members',members);
			grp.setValue('active',true);
			grp.insert();

		}
		else if(input.action=='editGroup'){
			var grp=new GlideRecord('x_881767_splitwise_expense_group');
			grp.addQuery('sys_id',input.groupId);
			grp.query();
			console.log(" expense group query "+grp.getRowCount());
			if(grp.next()){
				grp.setValue('group_name',input.name);	
				grp.setValue('members',input.members);
				grp.setValue('active',true);
				grp.update();
				console.log(" updated successfully with name "+input.name);
			}
		}

		else if(input.action=='deleteGroup'){
			var grp=new GlideRecord('x_881767_splitwise_expense_group');
			grp.addQuery('sys_id',input.groupId);
			grp.query();
			console.log(" expense group query "+grp.getRowCount());
			if(grp.next()){

				grp.deleteRecord();
				console.log(" Deleted the group successfully with name "+input.name);
			}
		}
		else if(input.action=='createExpense'){

			var newExpense=new GlideRecord('x_881767_splitwise_expense');
			var expenseData=input.expenseData;
			var amount=expenseData.amount;
			console.log("expensedata "+ JSON.stringify(expenseData)+" "+input.shares);
			newExpense.setValue('u_name',expenseData.name);
			newExpense.setValue('amount',amount);
			newExpense.setValue('paid_by',expenseData.paid_by);
			newExpense.setValue('group',input.groupId);
			newExpense.setValue('split_type',input.splitOption);
			var involved = [];
			if(input.splitOption=='Equally with everyone' && input.members){
				for(var i=0;i<input.members.length;i++){
					involved.push(input.members[i].member.ug_id);
				}
			}else{
				//console.log(" before "+Object.keys(expenseData.shares)+" "+Object.keys(expenseData.shares));
				for(var i=0;i<Object.keys(expenseData.shares).length;i++){
					console.log("inside "+Object.keys(expenseData.shares)[i]);
					involved.push(Object.keys(expenseData.shares)[i].split(",")[0]);
				}	
			}

			console.log("involved array "+involved);
			newExpense.setValue('u_user_share_pair',involved.toString());
			var response = newExpense.insert();
			console.log("new expense response "+response);
			//if(input.splitOption=='equal'){
			//var each=amount/(Object.keys(expenseData.shares).length);
			//var isPayerInvolved = false;
			//for(var i=0;i<Object.keys(expenseData.shares).length;i++){
			//var currentMember=Object.keys(expenseData.shares)[i].split(",")[0];
			//	var currentSpent=0;
			//	console.log('paidz-by '+expenseData.paid_by+" "+currentMember);
			//	if(expenseData.paid_by==currentMember){

			//	currentSpent=amount;
			//	isPayerInvolved = true;
			//}
			//updateUserExpenseTable(currentMember,response,each,currentSpent,input.groupId);

			//}
			//if(!isPayerInvolved){
			//	updateUserExpenseTable(expenseData.paid_by,response,0,currentSpent,input.groupId);
			//}

			//}
			if(input.splitOption=='By exact share'){
				//var each=amount/(Object.keys(expenseData.shares).length);
				var isPayerInvolved = false;
				for(var i=0;i<Object.keys(expenseData.shares).length;i++){
					var currentMember=Object.keys(expenseData.shares)[i].split(",")[0];
					var currentSpent=0;
					if(expenseData.paid_by==currentMember){
						currentSpent=amount;
						isPayerInvolved = true;
						console.log("payer involved");
					}
					var share=expenseData.shares[Object.keys(expenseData.shares)[i].toString()];
					if(share!=0){
						updateUserExpenseTable(currentMember,response,share,currentSpent,input.groupId);	
					}

				}
				if(!isPayerInvolved){
					console.log(" updating payer details")
					updateUserExpenseTable(expenseData.paid_by,response,0,amount,input.groupId);
				}

			}
			else if(input.splitOption=='By percentage'){
				var isPayerInvolved = false;
				for(var i=0;i<Object.keys(expenseData.shares).length;i++){
					var currentMember=Object.keys(expenseData.shares)[i].split(",")[0];
					var currentSpent=0;
					if(expenseData.paid_by==currentMember){
						currentSpent=amount;
						isPayerInvolved = true;
					}
					var share=(expenseData.shares[Object.keys(expenseData.shares)[i].toString()]*amount)/100;
					updateUserExpenseTable(currentMember,response,share,currentSpent,input.groupId);
				}
				if(!isPayerInvolved){
					updateUserExpenseTable(expenseData.paid_by,response,0,amount,input.groupId);
				}
			}

			updateSettlementDetails(input.groupId);
		}
		else if(input.action=='loadSettlement'){
			data.mySettlement=[];
			data.mySettlement = loadSettlementForCurrentUserAndGroup(gs.getUser().getID(),input.groupId)
			if(data.mySettlement.length==0){
				data.settlementMessage = " You are all settled!";
			}
		}
		else if(input.action=='acceptPayment'){
			var settle=new GlideRecord('x_881767_splitwise_settlement');
			settle.addQuery('from.sys_id',input.settled.fromId);
			settle.addQuery('to.sys_id',gs.getUser().getID());
			settle.addQuery('group',input.groupId);
			settle.query();
			if(settle.next()){
				settle.setValue('settled',true);
				settle.update();

				var usergroup=new GlideRecord('x_881767_splitwise_user_group');
				usergroup.addQuery('user',gs.getUser().getID());
				usergroup.addQuery('group',input.groupId);
				usergroup.query();
				if(usergroup.next()){
					usergroup.setValue('balance',parseFloat(usergroup.getValue('balance')-parseFloat(input.settled.amount)));
					usergroup.update();
				}
				var fromUsergroup=new GlideRecord('x_881767_splitwise_user_group');
				fromUsergroup.addQuery('user',input.settled.fromId);
				fromUsergroup.addQuery('group',input.groupId);
				fromUsergroup.query();
				if(fromUsergroup.next()){
					fromUsergroup.setValue('balance',parseFloat(fromUsergroup.getValue('balance')+parseFloat(input.settled.amount)));
					fromUsergroup.update();
				}
				data.accept_success=true;
			}else{
				data.accept_success=false;
			}
		}
		else if(input.action=='recordPayment'){
			var settle=new GlideRecord('x_881767_splitwise_settlement');
			settle.addQuery('to.sys_id',input.settled.toId);
			settle.addQuery('from.sys_id',gs.getUser().getID());
			settle.addQuery('group',input.groupId);
			settle.query();

			if(settle.next()){
				settle.setValue('settled',true);
				settle.update();
				var usergroup=new GlideRecord('x_881767_splitwise_user_group');
				usergroup.addQuery('user.sys_id',gs.getUser().getID());
				usergroup.addQuery('group',input.groupId);
				usergroup.query();
				console.log(' number of rows for to and from group '+usergroup.getRowCount());
				if(usergroup.next()){
					var updatedBalance =parseFloat(usergroup.getValue('balance'))+parseFloat(input.settled.amount);
					console.log("updatedBalance "+updatedBalance);
					usergroup.setValue('balance',updatedBalance);
					usergroup.update();
				}
				var toUsergroup=new GlideRecord('x_881767_splitwise_user_group');
				toUsergroup.addQuery('user',input.settled.toId);
				toUsergroup.addQuery('group',input.groupId);
				toUsergroup.query();
				if(toUsergroup.next()){
					toUsergroup.setValue('balance',parseFloat(toUsergroup.getValue('balance'))-parseFloat(input.settled.amount));
					toUsergroup.update();
				}
				data.accept_success=true;
			}else{
				data.accept_success=false;
			}

		}
		else if (input.action=='deleteExpense'){
			var expense=new GlideRecord('x_881767_splitwise_expense');
			expense.addQuery('sys_id',input.expenseId);
			expense.query();
			if(expense.next()){
				expense.deleteRecord();
			}
		}
		else if(input.action=='editExpense'){
			var expenseData=input.newexpense;
			var expenseId=input.expenseId;
			var involved = [];
			//console.log(" before "+Object.keys(expenseData.shares)+" "+Object.keys(expenseData.shares));
			if(input.splitOption=='Equally with everyone' && input.members){
				for(var i=0;i<input.members.length;i++){
					involved.push(input.members[i].member.ug_id);
				}
			}
			else{
				var shares={};
				if(expenseData.shares && Object.keys(expenseData.shares).length>0){
					shares=expenseData.shares;
					console.log(" shares now "+shares);
					for(var i=0;i<Object.keys(shares).length;i++){
						console.log("inside "+Object.keys(shares)[i]);
						involved.push(Object.keys(shares)[i].split(",")[0]);
					}
				}else{
					shares=input.oldexpense.shares;
					console.log(" shares old "+shares);
					for(var i=0;i<Object.keys(shares).length;i++){
						console.log("inside "+Object.keys(shares)[i]);
						if(shares[Object.keys(shares)[i]]!=0){
							involved.push(Object.keys(shares)[i].split(",")[0]);	
						}

					}
				}

			}
			console.log(" involved new "+involved);
			var expenseGR=new GlideRecord('x_881767_splitwise_expense');
			expenseGR.addQuery('sys_id',expenseId);
			expenseGR.query();
			if(expenseGR.next()){
				expenseGR.setValue('u_name',expenseData.name);
				expenseGR.setValue('amount',expenseData.amount);
				expenseGR.setValue('paid_by',expenseData.paid_by);
				expenseGR.setValue('split_type',input.splitOption);
				expenseGR.setValue('u_user_share_pair',involved.toString());
				expenseGR.update();
				console.log(" Expense "+ expenseId+ "updated ");

			}
			console.log(" condition "+expenseData.shares +" "+ Object.keys(expenseData.shares).length);

			if((input.newexpense.shares && Object.keys(input.newexpense.shares).length!=0) && (input.splitOption=='By exact share' || input.splitOption=='By percentage')){
				console.log("split type "+input.splitOption)
				console.log(JSON.stringify(input));
				var prev=input.oldexpense.involvedMemebrs.split(',');
				console.log("prev index"+prev.indexOf(input.oldexpense.paid_by));
				if(prev.indexOf(input.oldexpense.paid_by)==-1){
					prev.push(input.oldexpense.paid_by);
				}
				var total = input.newexpense.amount;
				//var cur=Object.keys(expenseData.shares)[i].split(",")[0];input.newexpense.members.split(',');
				//var each =total/cur.length;
				var isPaidByInvolved = false;
				for(var i=0;i<Object.keys(expenseData.shares).length;i++){
					var member=Object.keys(expenseData.shares)[i].split(",")[0];
					var spent=0;
					if(input.newexpense.paid_by==member){
						spent=input.newexpense.amount;
						isPaidByInvolved=true;
					}
					var balancesData={};
					var share = 0;
					if(input.splitOption=='By percentage'){
						share=((expenseData.shares[Object.keys(expenseData.shares)[i].toString()])*total)/100;
					}else{
						share=expenseData.shares[Object.keys(expenseData.shares)[i].toString()];
					}

					if(share!=0){
						if(prev.indexOf(member)!=-1){

							console.log("updating record with share "+share+share+" for "+member);
							balancesData=editOnlyUserExpenseTable(member,share,spent,'update',expenseId,input.groupId);	
							prev.splice(prev.indexOf(member),1);
						}else{
							console.log("inserting record with share "+share+" for "+member);
							balancesData=editOnlyUserExpenseTable(member,share,spent,'insert',expenseId,input.groupId);

						}
					}

					console.log('member '+member+" "+prev.indexOf(member));

					var user_group=new GlideRecord('x_881767_splitwise_user_group');
					user_group.addQuery('sys_id',member);
					user_group.query();
					if(user_group.next()){

						var currentBalance = user_group.getValue('balance');
						var newBalance = currentBalance-balancesData.oldValue+balancesData.newValue;
						user_group.setValue('balance',newBalance);
						user_group.update();
					}



				}
				console.log(" about to delete "+prev);
				deletePreviousLeftoverRecords(prev,expenseId,input.groupId);

				if(!isPaidByInvolved){
					console.log("paid by not involved ");
					balancesData=editOnlyUserExpenseTable(input.newexpense.paid_by,0,input.newexpense.amount,'insert',expenseId,input.groupId);
					var paidBy=input.newexpense.paid_by;
					if(prev.indexOf()!=1){
						prev.splice(prev.indexOf(paidBy),1);
					}
					var user_group=new GlideRecord('x_881767_splitwise_user_group');
					user_group.addQuery('sys_id',paidBy);
					user_group.query();
					if(user_group.next()){
						var currentBalance = user_group.getValue('balance');
						var newBalance = currentBalance-balancesData.oldValue+balancesData.newValue;
						user_group.setValue('balance',newBalance);
						user_group.update();
					}
				}
				console.log("updating settlement "+input.groupId);
				updateSettlementDetails(input.groupId);

				console.log("updated settlement "+input.groupId);
			}
		}
	}

	function updateUserExpenseTable(usergroupid,expense,share,spent,group,user){
		var user_exp = new GlideRecord('x_881767_splitwise_user_expense');
		user_exp.setValue('user',usergroupid);
		user_exp.setValue('spent',spent);
		user_exp.setValue('share',share);
		user_exp.setValue('u_balance',spent-share);
		user_exp.setValue('expense',expense);
		user_exp.setValue('group',group);
		user_exp.insert();

		var user_group=new GlideRecord('x_881767_splitwise_user_group');
		user_group.addQuery('sys_id',usergroupid);
		user_group.query();
		console.log(" rows "+user_group.getRowCount()+" user "+usergroupid);
		if(user_group.next()){

			var balance=parseFloat(user_group.getValue('balance'));
			console.log('current '+balance+" spent "+spent+" share "+share+" "+(spent-share));
			console.log(' test '+(balance+spent)+' '+typeof balance+' '+typeof spent)
			var newBalance=balance+parseFloat(spent)-parseFloat(share);
			console.log('after balance '+newBalance);
			user_group.setValue('balance',newBalance);
			user_group.update();
		}

	}
	function updateSettlementDetails(groupid){
		gs.info(" inside update settlement "+groupid)
		var settle=new GlideRecord('x_881767_splitwise_settlement');
		settle.addQuery('group.sys_id',groupid);
		settle.query();
		settle.deleteMultiple();

		var user_group=new GlideRecord('x_881767_splitwise_user_group');
		user_group.addQuery('group.sys_id',groupid);
		user_group.query();
		var settlementDetails = [];
		var currentuserBalance={};
		var positive = [];
		var negative = [];
		console.log(" rows "+user_group.getRowCount()+" user "+groupid);
		while(user_group.next()){
			var obj={};
			obj.user=user_group.getValue('user');
			if(user_group.getValue('balance')<0){
				obj.balance=0-user_group.getValue('balance');
				negative.push(obj);
			}else if(user_group.getValue('balance')>0){
				obj.balance=user_group.getValue('balance');
				positive.push(obj);
			}
		}

		var pos=0;
		console.log("posobj "+JSON.stringify(positive)+" "+JSON.stringify(negative));
		for(var i=0;i<negative.length;i++){
			var negObj=negative[i];
			var posObj=positive[pos];
			var settleObj={};
			settleObj.to=[];
			settleObj.from=negObj.user;
			console.log("posobj "+JSON.stringify(posObj)+" "+JSON.stringify(negObj));
			if(negObj.balance<=posObj.balance){
				var toObj={};
				toObj.user=posObj.user;
				toObj.amount=negObj.balance;
				updateSettlement(negObj.user,posObj.user,groupid,toObj.amount);
				settleObj.to.push(toObj);
				if(posObj.balance>negObj.balance){
					posObj.balance=posObj.balance-negObj.balance;	
				}else{
					pos++;
				}

			}else if(negObj.balance>posObj.balance){
				var curBalance=negObj.balance;
				while(curBalance>0){
					var toObj={};
					toObj.user=posObj.user;

					if(posObj.balance>curBalance){
						toObj.amount=curBalance;
						posObj.balance=posObj.balance-curBalance;
					}else{
						toObj.amount=posObj.balance;
						pos++;
						posObj=positive[pos];
					}
					curBalance=curBalance-toObj.amount;
					toObj.status=false;
					updateSettlement(negObj.user,toObj.user,groupid,toObj.amount);
					settleObj.to.push(toObj);

				}

			}
			settlementDetails.push(settleObj);
		}
		data.settlemetDetails=settlementDetails;
		data.currentUserBalance=currentuserBalance;
		console.log("settlement "+JSON.stringify(settlementDetails));
	}

	function updateSettlement(from,to,group,amount){
		var settle=new GlideRecord('x_881767_splitwise_settlement');
		settle.setValue('from',from);
		settle.setValue('to',to);
		settle.setValue('group',group);
		settle.setValue('amount',amount);
		settle.insert();
	}
	function deletePreviousLeftoverRecords(prev,expenseId,groupId){
		console.log("prev arr "+prev.toString());
		for(var i=0;i<prev.length;i++){
			var balancesData=editOnlyUserExpenseTable(prev[i],0,0,'delete',expenseId,groupId);
			console.log(" balance data "+balancesData);
			var user_group=new GlideRecord('x_881767_splitwise_user_group');
			user_group.addQuery('sys_id',prev[i]);
			user_group.query();
			if(user_group.next()){
				var currentBalance = user_group.getValue('balance');
				var newBalance = currentBalance-balancesData.oldValue;
				user_group.setValue('balance',newBalance);
				user_group.update();
			}
		}

	}
	function editOnlyUserExpenseTable(usergroupid,share,spent,action,expense,group){
		var balances={};
		if(action=='insert' || action=='update'){
			var user_exp = new GlideRecord('x_881767_splitwise_user_expense');
			user_exp.addQuery('user',usergroupid);
			user_exp.addQuery('expense',expense);
			user_exp.addQuery('group',group);
			user_exp.query();
			if(user_exp.getRowCount()>0){
				if(user_exp.next()){
					balances.oldValue=user_exp.getValue('u_balance');
					user_exp.setValue('spent',spent);
					user_exp.setValue('share',share);
					var newBalance =parseFloat(spent)-parseFloat(share);
					user_exp.setValue('u_balance',newBalance);
					balances.newValue=newBalance;
					user_exp.update();

					console.log(" updated "+newBalance);
				}
			}else{
				user_exp.setValue('user',usergroupid);
				user_exp.setValue('spent',spent);
				user_exp.setValue('share',share);
				user_exp.setValue('u_balance',parseFloat(spent)-parseFloat(share));
				//user_exp.setValue('expense',expense);
				user_exp.setValue('expense',expense);
				//user_exp.setValue('group',group);
				user_exp.setValue('group',group);
				user_exp.insert();
				balances.oldValue=0;
				balances.newValue=spent-share;
			}
		}
		else if(action=='delete'){
			var user_exp = new GlideRecord('x_881767_splitwise_user_expense');
			user_exp.addQuery('user',usergroupid);
			user_exp.addQuery('expense',expense);
			user_exp.addQuery('group',group);
			user_exp.query();
			console.log(user_exp.getRowCount());
			if(user_exp.next()){
				balances.oldValue=user_exp.getValue('u_balance');
				balances.newValue=0;
				user_exp.deleteRecord();
			}

		}
		return balances;



	}
	function loadSettlementForCurrentUserAndGroup(userid,groupId){
		var mySettlement=[];
		var fromSettle=new GlideRecord('x_881767_splitwise_settlement');
		fromSettle.addQuery('from.sys_id',userid);
		fromSettle.addQuery('settled',false);
		fromSettle.addQuery('group.sys_id',groupId);
		fromSettle.query();
		console.log(' from row count '+fromSettle.getRowCount()+' '+gs.getUser().getID());
		if(fromSettle.getRowCount()>0){
			while(fromSettle.next()){
				var thisRow={};
				thisRow.type='pay';
				thisRow.toId=fromSettle.getValue('to');
				thisRow.to=fromSettle.getDisplayValue('to');
				thisRow.amount=fromSettle.getValue('amount');
				thisRow.settled=fromSettle.getValue('settled');
				console.log('settled '+fromSettle.getValue('settled')+" "+fromSettle.getDisplayName('settled'));
				mySettlement.push(thisRow);
			}
		}else{
			var toSettle=new GlideRecord('x_881767_splitwise_settlement');
			toSettle.addQuery('to.sys_id',userid);
			toSettle.addQuery('settled',false);
			toSettle.addQuery('group.sys_id',groupId);
			toSettle.query();
			console.log(' to row count '+toSettle.getRowCount());
			if(toSettle.getRowCount()>0){
				while(toSettle.next()){
					var thisRow={};
					thisRow.type='accept';
					thisRow.from=toSettle.getDisplayValue('from');
					thisRow.fromId=toSettle.getValue('from');
					thisRow.amount=toSettle.getValue('amount');
					thisRow.settled=toSettle.getValue('settled');
					console.log('settled '+toSettle.getValue('settled')+" "+toSettle.getDisplayName('settled'))
					mySettlement.push(thisRow);
				}
			}
		}

		return mySettlement;
	}

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-09-23 18:04:16</sys_created_on>
        <sys_id>4279ecf647061510e292f2e7536d4342</sys_id>
        <sys_mod_count>621</sys_mod_count>
        <sys_name>Splitwise Content</sys_name>
        <sys_package display_value="Splitwise" source="x_881767_splitwise">534b06d447021110e292f2e7536d438f</sys_package>
        <sys_policy/>
        <sys_scope display_value="Splitwise">534b06d447021110e292f2e7536d438f</sys_scope>
        <sys_update_name>sp_widget_4279ecf647061510e292f2e7536d4342</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-10-18 06:43:32</sys_updated_on>
        <template><![CDATA[<div class="container-fluid">
  <div id="main-dashboard" class="row" ng-if="c.data.action=='dashboard'">
    <div class="dashboard-header">
      <h2 class="col-md-6">
        Dashboard  
      </h2>
      <sp-widget widget="c.data.w2"></sp-widget>

      <div id="main-button-container" class="col-md-6 button-container">
        <a class="btn btn-large btn-orange " data-toggle="modal" href="#add-new-group">
          Add new group
        </a>
        <a class="btn btn-large btn-mint "href="https://dev70031.service-now.com/$pa_dashboard.do?sysparm_dashboard=a2f0642647169150e292f2e7536d4312&sysparm_tab=d301a42647169150e292f2e7536d4339&sysparm_cancelable=true&sysparm_editable=true&sysparm_active_panel=quickLayoutSideContent" target="_blank" rel="noopener noreferrer">
          View Dashboard
        </a>
      </div>
      <hr/>
      <div class="row dashboard-totals" id="balance-container">
        <div class="col-md-4 dashboard-total">
          <h4>
            Your total 
          </h4><h5>
          {{c.data.balance}}
          </h5>
        </div>
        <div class="col-md-4 dashboard-owe">
          <h4>
            you owe 
          </h4>
          <h5>
            {{c.data.owe}}
          </h5>
        </div>
        <div class="col-md-4 dashboard-owed">
          <h4>
            You are owed 
          </h4>
          <h5>
            {{c.data.owed}}
          </h5>
        </div>
      </div>
    </div>
    <div id="add-new-group" class="new-group-container modal fade modal-dialog " tabindex="-1" aria-hidden="true" style="display: none;">
      <div class="modal-dialog">
        <!-- Modal content-->
        <div class="modal-content">
          <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal">&times;</button>
            <h4 class="modal-title">Add new group for your expense tracking</h4>
          </div>
          <ng-form name="addNewGroupForm">
            <div class="modal-body">

              <div class="form-group">
                <label for="groupName">Group Name:</label>
                <input type="text" name="newGroup" class="form-control" id="newGroup" ng-model="c.data.newgroup.name" placeholder="New Group" ng-required="true">
              </div>
              <div clas="group-members form-group">
                <label for="members">Members: </label><br/>
                <label for="selectedMembers">Selected Users</label>
                <div  ng-repeat="member in c.data.newgroup.members">
                  <label>{{member.name}}</label>
                  <button type="button" class="close" ng-click="c.removeMember(member)">×</button>
                </div>
                <sn-record-picker field="member" table="'sys_user'" default-query="c.data.getUsersByRoleQuery" display-field="'name'" value-field="'sys_id'" search-fields="'name'" page-size="100" ></sn-record-picker>
              </div>

            </div>
            <div class="modal-footer">
              <button type="submit" class="btn btn-primary"  ng-disabled="addNewGroupForm.$invalid" ng-click="c.createGroup()" data-dismiss="modal">Create</button>
              <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            </div>
          </ng-form>
        </div>
      </div>
    </div>

  </div>
  <div id="all-groups" class="container" ng-if="c.data.action=='showGroupPage'">
    <div class="row">
      <div class="col-md-9">
        <div class="group-header row">
          <h2 class="col-md-6">
            {{c.data.groupName}}  
          </h2>
          <div id="main-button-container" class="col-md-6 button-container">
            <a class="btn btn-large btn-orange " data-toggle="modal" href="#add_expense" ng-click="c.clearPreviousEntries()">
              Add an expense
            </a>
            <a class="btn btn-large btn-mint" data-toggle="modal" href="#settle_up" ng-click="c.loadSettlement()">
              Settle up
            </a>
            <a class="btn btn-large btn-edit" data-toggle="modal" href="#edit-new-group" ng-click="c.loadCurrentGroup()">
              Modify Group
            </a>


          </div>
          <hr/>


          <!-- <div class="row dashboard-totals" id="balance-container">
            <div ng-if="c.data.group_status=='owed'">
              <h4 style="color:green">
                You get back {{c.data.group_balance}}
              </h4>
            </div>
            <div ng-if="c.data.group_status=='owes'">
              <h4 style="color:red">
                You owe {{c.data.group_balance}}
              </h4>
            </div>
            <div ng-if="c.data.group_status=='settled'">
              <h4 style="color:grey">
                You are all settled!!
              </h4>
            </div>
          </div> -->

          <div id="add_expense" class="new-expense-container modal fade " tabindex="-1" aria-hidden="true" style="display: none;">

            <div class="modal-dialog">
              <div class="modal-content">
                <div class="modal-header">
                  <button type="button" class="close" data-dismiss="modal">&times;</button>
                  <h4 class="modal-title">{{c.data.edit_create_label}}</h4>
                </div>
                <ng-form name="addExpenseForm">
                <div class="modal-body">
                  <div class="form-group">
                    <label for="expenseName">Expense For:</label>
                    <input type="text" class="form-control" id="newExpenseName" ng-model="c.data.newexpense.name" placeholder="Enter Description" ng-required="true">
                    <label for="expenseAmount">Amount:</label>
                    <input type="text" class="form-control" id="newExpenseAmount" ng-model="c.data.newexpense.amount" placeholder="0.00" ng-required="true">
                    <label>Paid by </label>
                    <div>
                      <sn-record-picker field="groupMember" default-query="c.data.getUsersByGroupQuery" table="'x_881767_splitwise_user_group'" display-field="'user.name'" value-field="'sys_id'" search-fields="'user.name'" page-size="100" ng-required="true" ></sn-record-picker> 
                    </div>

                    <label>How do you want to split </label> 
                    <!--<div class="dropdown ">
                  <button class="btn btn-primary dropdown-toggle" type="button" data-toggle="dropdown">Equally with everyone
                    <span class="caret"></span></button>
                  <ul class="dropdown-toggle"  data-toggle="dropdown">
                    <li class="dropdown-menu"><a href="#splitting_container" class="w3-bar-item w3-button" data-toggle="modal">Specify split</a></li>
                    <li class="dropdown-menu"><a class="w3-bar-item w3-button" >Specify split</a></li>
                  </ul>

                </div>-->
                    <a href="#splitting_container" class="w3-bar-item w3-button" data-toggle="modal" ng-click="c.showSplitOption(c.data.newexpense.split_type_value) ">{{c.data.newexpense.split_type_value}}</a>
                  </div>
                </div>
                <div class="modal-footer">
                  <button type="button" class="btn btn-primary" ng-click="c.createExpense()" data-dismiss="modal" ng-disabled="addExpenseForm.$invalid">Save</button>
                  <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
                  </ng-form>
              </div>
            </div>
          </div>
          <div id="settle_up" class="new-expense-container modal fade " tabindex="-1" aria-hidden="true" style="display: none;">

            <div class="modal-dialog">
              <div class="modal-content">
                <div class="modal-header">
                  <button type="button" class="close" data-dismiss="modal">&times;</button>
                  <h4 class="modal-title">Settle expenses</h4>
                </div>
                <div class="modal-body">
                  <div class="form-group">
                    <div class="all_settled" ng-if='c.data.settlementMessage'>
                      <label class="all_settled-label"> {{c.data.settlementMessage}}</label>
                    </div>
                    <div class="payment" ng-repeat="settle in c.data.mySettlement track by $index">
                      <div ng-if="settle.type=='accept'">
                        <label class="setllement"> <b>{{settle.from}}</b> paid you<b> {{settle.amount}}</b><button type="button" class="btn btn-primary btn-settle" ng-click="c.acceptPayment(settle,$index)" ng-disabled="settle.settled==1">Accept</button></label>
                      </div>
                      <div ng-if="settle.type=='pay'">
                        <label class="setllement"> Record Payment of {{settle.amount}} to {{settle.to}}<button type="button" class="btn btn-primary btn-settle" ng-click="c.recordPayment(settle,$index)" ng-disabled="settle.settled==1">Settle</button></label>
                      </div>
                    </div>
                  </div>
                </div>
                <div class="modal-footer">
                  <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
              </div>
            </div>
          </div>
          <div id="edit-new-group" class="modal fade" tabindex="-1" aria-hidden="true" style="display: none;">
            <div class="modal-dialog">
              <!-- Modal content-->
              <div class="modal-content">
                <div class="modal-header">
                  <button type="button" class="close" data-dismiss="modal">&times;</button>
                  <h4 class="modal-title">Modify group for your expense tracking</h4>
                </div>
                <div class="modal-body">
                  <div class="form-group">
                    <label for="groupName">Group Name:</label>
                    <input type="text" class="form-control" id="newGroup" ng-model="c.data.currentGroup.name" placeholder="New Group">
                  </div>
                  <div clas="group-members form-group">
                    <label for="members">Members: </label><br/>
                    <div  ng-repeat="member in c.data.currentGroup.members">
                      <label>{{member.name}}</label>
                      <button type="button" class="close" ng-click="c.editMember(member)">×</button>
                    </div>
                    <sn-record-picker field="editedMember" table="'sys_user'" default-query="c.data.getUsersByRoleQuery" display-field="'name'" value-field="'sys_id'" search-fields="'name'" page-size="100" ></sn-record-picker>
                  </div>
                </div>
                <div class="modal-footer">
                  <a class="btn btn-large btn-danger" data-toggle="modal" href="#delete_group" data-dismiss="modal">Delete</a>

                  <button type="button" class="btn btn-primary" ng-click="c.editGroup()" data-dismiss="modal">Edit</button>
                  <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                </div>
              </div>
            </div>
          </div>
          <div id="delete_group" class="splitting_container modal fade" tabindex="-1" aria-hidden="true" style="display:none">
            <div class="modal-dialog">
              <div class="modal-content">
                <div class="modal-header">
                  <button type="button" class="close" data-dismiss="modal">&times;</button>
                  <h4 class="modal-title">Confirmation</h4>
                </div>
                <div class="modal-body">
                  <h4>
                    Delete the selected group?
                  </h4>
                </div>
                <div class="modal-footer">
                  <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                  <button type="button" class="btn btn-danger" data-dismiss="modal" ng-click="c.deleteGroup()">Delete</button>
                </div>
              </div>
            </div>
          </div>
          <div id="splitting_container" class="splitting_container modal fade" tabindex="-1" aria-hidden="true" style="display:none">
            <div class="modal-dialog">
              <div class="modal-content">
                <div class="modal-header">
                  <button type="button" class="close" data-dismiss="modal">&times;</button>
                  <h4 class="modal-title">Choose split option</h4>
                </div>
                <div class="modal-body">
                  <div class="form-group">
                    <ul class="nav nav-tabs">
                      <li class="nav-item">
                        <a class="nav-link active"  href="#share-equally-options" ng-click="c.showSplitOption('Equally among some')" aria-current="true">Equally</a>
                      </li>
                      <li class="nav-item">
                        <a class="nav-link" href="#by-amount-options" ng-click="c.showSplitOption('By exact share')">By exact amount</a>
                      </li>
                      <li class="nav-item">
                        <a class="nav-link" href="#by-share-options" ng-click="c.showSplitOption('By percentage')">By percentage share</a>
                      </li>
                    </ul>
                    <div id="by-amount-options" ng-if="c.data.newexpense.split_type_value=='By exact share'">
                      <div ng-repeat="memberData in c.data.nmembers" >
                        <label for="newExpenseName" >{{memberData.member.name}} </label>
                        <input type="text" class="form-control" id="userShare" ng-model="c.data.newexpense.shares[memberData.member.ug_id+','+memberData.member.sys_id]" placeholder="0.00" >
                      </div>
                    </div>
                    <div id="share-equally-options" ng-if="c.data.newexpense.split_type_value=='Equally among some' || c.data.newexpense.split_type_value=='Equally with everyone' ">
                      <div ng-repeat="memberData in c.data.nmembers" >
                        <input class="form-check-input" type="checkbox" value="" ng-model="c.data.newexpense.shares[memberData.member.ug_id+','+memberData.member.sys_id]" id="flexCheckDefault" >
                        <label class="form-check-label" for="flexCheckDefault">
                          {{memberData.member.name}}
                        </label>
                      </div>
                    </div>
                    <div id="by-share-options"  ng-if="c.data.newexpense.split_type_value=='By percentage'">
                      <div ng-repeat="memberData in c.data.nmembers">
                        <label for="newExpenseName" >{{memberData.member.name}} </label>
                        <input type="text" class="form-control" id="userShare" ng-model="c.data.newexpense.shares[memberData.member.ug_id+','+memberData.member.sys_id]" placeholder="0.00%" >
                      </div>
                    </div>
                  </div>
                </div>
                <div class="modal-footer">
                  <button type="button" class="btn btn-default" data-dismiss="modal">Done</button>
                </div>
              </div>
            </div>
          </div>
        </div>
        <div id="expense-container" >
          <div>
            <div class="expense-header row">
              <h4 class="col-md-6">
                Expenses
              </h4>
            </div>
            <div ng-if="c.data.expenses.length<=0" style="text-align: left; padding-left: 235px;">
              <h2 style="font-size: 28px; line-height: 110%">
                You have not added any expenses yet
              </h2>
              <p style="margin-top: 15px; color: #999; font-size: 18px; line-height: 24px">
                To add a new expense, click the orange “Add an expense” button.
              </p>
            </div>
            <ul class="expense-body list-group" >
              <li class=" list-group-item row" ng-repeat="exp in c.data.expenses">
                <div class="col-md-2">
                  <h4>
                    {{exp.date}}
                  </h4>
                </div>
                <div class="col-md-3">
                  <h4>
                    {{exp.name}}
                  </h4>
                </div>
                <div class="col-md-3">
                  <h5>
                    {{exp.paid_by}} paid 
                  </h5>
                  <h4>
                    {{exp.amount}}
                  </h4>
                </div>
                <div class="col-md-2" ng-if="exp.myShare>0" style="color:green">
                  <h5>
                    You lent 
                  </h5>
                  <h4>
                    {{exp.myShare}}
                  </h4>
                </div>
                <div class="col-md-2" ng-if="exp.myShare<0" style="color:red">
                  <h5>
                    You borrowed 
                  </h5>
                  <h4>
                    {{0-exp.myShare}}
                  </h4>
                </div>
                <div class="col-md-2" ng-if="exp.myShare==0" style="color:grey">
                  <h5>
                    You are not involved
                  </h5>
                </div>
                <div class="col-md-2"> <br>

                  <a href="#add_expense" data-toggle="modal" ng-click="c.loadCurrentData(exp,'Edit')"><i class="fa fa-pencil edit-icon" ></i></a>

                  <a href="#delete_container" data-toggle="modal" ng-click="c.loadTeBeDeleted(exp)"><i class="fa fa-trash delete-icon" aria-hidden="true"></i> </a>
                </div>
                <div id="delete_container" class="splitting_container modal fade" tabindex="-1" aria-hidden="true" style="display:none">
                  <div class="modal-dialog">
                    <div class="modal-content">
                      <div class="modal-header">
                        <button type="button" class="close" data-dismiss="modal">&times;</button>
                        <h4 class="modal-title">Confirmation</h4>
                      </div>
                      <div class="modal-body">
                        <h4>
                          Delete the selected expense?
                        </h4>
                      </div>
                      <div class="modal-footer">
                        <button type="button" class="btn btn-default" data-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-danger" data-dismiss="modal" ng-click="c.deleteExpense()">Delete</button>
                      </div>
                    </div>
                  </div>
                </div>
              </li>
            </ul>
          </div>


        </div>
      </div>
      <div class="col-md-3">


        <div id="members-container" >
          <!-- <div class="members-header" id="members-heading">
          <button class="btn btn-link" type="button" data-toggle="collapse" class="list-group-item dropdown-toggle" data-target="#membersDetails" aria-expanded="true" aria-controls="collapseOne" ng-click="c.loadGroups($event)">
            Group Members Balances <i class="fa-thin fa-square-chevron-down"></i>
          </button>
        </div> -->
          <h4>
            Group Balances
          </h4>
          <div id="membersDetails">
            <ul class="list-group members-list" ng-repeat="memberSettlement in c.data.nmembers">
              <li class="list-group-item">
                <h4>
                  {{memberSettlement.member.name}}
                </h4>
                <div ng-if="memberSettlement.settlement.length>0">
                  <div ng-repeat="settlement in memberSettlement.settlement" >
                    <h5 ng-if="settlement.type=='pay'" style="color:red">
                      Owes &#8377;{{settlement.amount}} to {{settlement.to}}.
                    </h5>
                  </div>
                  <div ng-repeat="settlement in memberSettlement.settlement" >
                    <h5 ng-if="settlement.type=='accept'" style="color:green">
                      Gets back &#8377;{{settlement.amount}} from {{settlement.from}}.
                    </h5>
                  </div>
                </div>
                <div ng-if="memberSettlement.settlement.length<=0">
                  <div>
                    <h5>
                      All settled
                    </h5>
                  </div>
                </div>
              </li>
            </ul>
          </div>

        </div>


      </div>
    </div>


  </div>
  <div id="all-expenses" class="all-expenses-header" ng-if="c.data.action=='allExpenses'">
    <h1>
      All Expenses
    </h1>
  </div>
</div>
]]></template>
    </sp_widget>
</record_update>
