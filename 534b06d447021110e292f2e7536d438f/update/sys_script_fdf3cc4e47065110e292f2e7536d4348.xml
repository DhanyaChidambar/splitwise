<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_881767_splitwise_expense</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>update user-expense on update expense</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
	var total = current.getValue('amount');
	gs.info("divide equally "+current.getValue('split_type')+" ");
	if(current.getValue('split_type')=="equally_with_everyone"){
		var prev=previous.getValue('u_user_share_pair').split(',');
		
		var total = current.getValue('amount');
		var user_group=new GlideRecord('x_881767_splitwise_user_group');
		user_group.addQuery('group.sys_id',current.getValue('group'));
		user_group.query();
		var users_count=user_group.getRowCount();
		var each=total/users_count;
		while(user_group.next()){
			var member=user_group.getValue('sys_id');
			var spent=0;
			gs.info("paid by "+current.getValue('paid_by')+" current "+member+" amount:"+current.getValue('amount'));
			if(current.getValue('paid_by')==member){
				spent=current.getValue('amount');
			}
			var balancesData={};
			if(prev.indexOf(member)!=-1){

				balancesData=updateUserExpenseTable(member,each,spent,'update');	
				prev.splice(prev.indexOf(member),1);
			}else{

				balancesData=updateUserExpenseTable(member,each,spent,'insert');

			}
			var balance=parseFloat(user_group.getValue('balance'));
			gs.info(" old:"+balancesData.oldValue+" new: "+balancesData.newValue);
			var newBalance = balance-parseFloat(balancesData.oldValue)+parseFloat(balancesData.newValue);
			gs.info('after balance '+newBalance);
			user_group.setValue('balance',newBalance);
			user_group.update();
		}
		deletePreviousLeftoverRecords(prev);
		updateSettlementDetails();

	}
	else if(current.getValue('split_type')=="equally_among_some"){
		var prev=previous.getValue('u_user_share_pair').split(',');
		gs.info("prev index"+prev.indexOf(previous.getValue('paid_by')));
		if(prev.indexOf(previous.getValue('paid_by'))==-1){
			prev.push(previous.getValue('paid_by'));
		}
		var total = current.getValue('amount');
		var cur=current.getValue('u_user_share_pair').split(',');
		var each =total/cur.length;
		var isPaidByInvolved = false;
		for(var i=0;i<cur.length;i++){
			var member=cur[i];
			var spent=0;
			if(current.getValue('paid_by')==member){
				spent=current.getValue('amount');
				isPaidByInvolved=true;
			}
			var balancesData={};
			if(prev.indexOf(member)!=-1){

				balancesData=updateUserExpenseTable(member,each,spent,'update');	
				prev.splice(prev.indexOf(member),1);
			}else{

				balancesData=updateUserExpenseTable(member,each,spent,'insert');

			}
			var user_group=new GlideRecord('x_881767_splitwise_user_group');
			user_group.addQuery('sys_id',member);
			user_group.query();
			if(user_group.next()){
				var currentBalance = user_group.getValue('balance');
				var newBalance = currentBalance-balancesData.oldValue+balancesData.newValue;
				user_group.setValue('balance',newBalance);
				user_group.update();
			}

		}
		deletePreviousLeftoverRecords(prev);
		if(!isPaidByInvolved){
			balancesData=updateUserExpenseTable(current.getValue('paid_by'),0,current.getValue('amount'),'insert');
			var paidBy=current.getValue('paid_by');
			if(prev.indexOf()!=1){
				prev.splice(prev.indexOf(paidBy),1);
			}
			var user_group=new GlideRecord('x_881767_splitwise_user_group');
			user_group.addQuery('sys_id',paidBy);
			user_group.query();
			if(user_group.next()){
				var currentBalance = user_group.getValue('balance');
				var newBalance = currentBalance-balancesData.oldValue+balancesData.newValue;
				user_group.setValue('balance',newBalance);
				user_group.update();
			}
		}
		updateSettlementDetails();


	}

	function deletePreviousLeftoverRecords(prev){
		gs.info("prev arr "+prev.toString());
		for(var i=0;i<prev.length;i++){
			var balancesData=updateUserExpenseTable(prev[i],0,0,'delete');
			var user_group=new GlideRecord('x_881767_splitwise_user_group');
			user_group.addQuery('sys_id',prev[i]);
			user_group.query();
			if(user_group.next()){
				var currentBalance = user_group.getValue('balance');
				var newBalance = currentBalance-balancesData.oldValue;
				user_group.setValue('balance',newBalance);
				user_group.update();
			}
		}

	}
	function updateUserExpenseTable(usergroupid,share,spent,action){
		var balances={};
		if(action=='insert' || action=='update'){
			var user_exp = new GlideRecord('x_881767_splitwise_user_expense');
			user_exp.addQuery('user',usergroupid);
			user_exp.addQuery('expense',current.getValue('sys_id'));
			user_exp.addQuery('group',current.getValue('group'));
			user_exp.query();
			if(user_exp.getRowCount()>0){
				if(user_exp.next()){
					balances.oldValue=user_exp.getValue('u_balance');
					user_exp.setValue('spent',spent);
					user_exp.setValue('share',share);
					var newBalance =parseFloat(spent)-parseFloat(share);
					user_exp.setValue('u_balance',newBalance);
					balances.newValue=newBalance;
					user_exp.update();

					gs.info(" updated "+newBalance);
				}
			}else{
				user_exp.setValue('user',usergroupid);
				user_exp.setValue('spent',spent);
				user_exp.setValue('share',share);
				user_exp.setValue('u_balance',parseFloat(spent)-parseFloat(share));
				//user_exp.setValue('expense',expense);
				user_exp.setValue('expense',current.getValue('sys_id'));
				//user_exp.setValue('group',group);
				user_exp.setValue('group',current.getValue('group'));
				user_exp.insert();
				balances.oldValue=0;
				balances.newValue=spent-share;
			}
		}
		else if(action=='update'){
			var user_exp = new GlideRecord('x_881767_splitwise_user_expense');
			user_exp.addQuery('user',usergroupid);
			user_exp.addQuery('expense',current.getValue('sys_id'));
			user_exp.addQuery('group',current.getValue('group'));
			user_exp.query();
			gs.info("action "+action+" user:"+usergroupid+" expense:"+current.getValue('sys_id')+" group:"+current.getValue('group'));
			gs.info("query run, fetching "+user_exp.getRowCount());
			if(user_exp.next()){
				balances.oldValue=user_exp.getValue('u_balance');
				user_exp.setValue('spent',spent);
				user_exp.setValue('share',share);
				var newBalance =parseFloat(spent)-parseFloat(share);
				user_exp.setValue('u_balance',newBalance);
				balances.newValue=newBalance;
				user_exp.update();

				gs.info(" updated "+newBalance);
			}

		}else if(action=='delete'){
			var user_exp = new GlideRecord('x_881767_splitwise_user_expense');
			user_exp.addQuery('user',usergroupid);
			user_exp.addQuery('expense',current.getValue('sys_id'));
			user_exp.addQuery('group',current.getValue('group'));
			user_exp.query();
			if(user_exp.next()){
				balances.oldValue=user_exp.getValue('u_balance');
				balances.newValue=0;
				user_exp.deleteRecord();
			}

		}
		return balances;



	}
	function updateSettlementDetails(){
		var groupid=current.getValue('group');
		gs.info(" inside update settlement "+groupid)
		var settle=new GlideRecord('x_881767_splitwise_settlement');
		settle.addQuery('group.sys_id',groupid);
		settle.query();
		settle.deleteMultiple();

		var user_group=new GlideRecord('x_881767_splitwise_user_group');
		user_group.addQuery('group.sys_id',groupid);
		user_group.query();
		var settlementDetails = [];
		var currentuserBalance={};
		var positive = [];
		var negative = [];
		gs.info(" rows "+user_group.getRowCount()+" user "+groupid);
		while(user_group.next()){
			var obj={};
			obj.user=user_group.getValue('user');
			if(user_group.getValue('balance')<0){
				obj.balance=0-user_group.getValue('balance');
				negative.push(obj);
			}else if(user_group.getValue('balance')>0){
				obj.balance=user_group.getValue('balance');
				positive.push(obj);
			}
		}

		var pos=0;
		gs.info("posobj "+JSON.stringify(positive)+" "+JSON.stringify(negative));
		for(var i=0;i<negative.length;i++){
			var negObj=negative[i];
			var posObj=positive[pos];
			var settleObj={};
			settleObj.to=[];
			settleObj.from=negObj.user;
			gs.info("posobj "+JSON.stringify(posObj)+" "+JSON.stringify(negObj));
			if(negObj.balance<=posObj.balance){
				var toObj={};
				toObj.user=posObj.user;
				toObj.amount=negObj.balance;
				updateSettlement(negObj.user,posObj.user,groupid,toObj.amount);
				settleObj.to.push(toObj);
				if(posObj.balance>negObj.balance){
					posObj.balance=posObj.balance-negObj.balance;	
				}else{
					pos++;
				}

			}else if(negObj.balance>posObj.balance){
				var curBalance=negObj.balance;
				while(curBalance>0){
					var toObj={};
					toObj.user=posObj.user;
					if(posObj.balance>curBalance){
						toObj.amount=curBalance;
						posObj.balance=posObj.balance-curBalance;
					}else{
						toObj.amount=posObj.balance;
						pos++;
						posObj=positive[pos];
					}
					curBalance=curBalance-toObj.amount;
					toObj.status=false;
					updateSettlement(negObj.user,toObj.user,groupid,toObj.amount);
					settleObj.to.push(toObj);

				}

			}
			settlementDetails.push(settleObj);
		}

		gs.info("settlement "+JSON.stringify(settlementDetails));
	}

	function updateSettlement(from,to,group,amount){
		gs.info('from :'+from+" to:"+to+" amount:"+amount);
		var settle=new GlideRecord('x_881767_splitwise_settlement');
		settle.setValue('from',from);
		settle.setValue('to',to);
		settle.setValue('group',group);
		settle.setValue('amount',amount);
		settle.insert();
	}
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-09-21 07:27:06</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>fdf3cc4e47065110e292f2e7536d4348</sys_id>
        <sys_mod_count>43</sys_mod_count>
        <sys_name>update user-expense on update expense</sys_name>
        <sys_overrides/>
        <sys_package display_value="Splitwise" source="x_881767_splitwise">534b06d447021110e292f2e7536d438f</sys_package>
        <sys_policy/>
        <sys_scope display_value="Splitwise">534b06d447021110e292f2e7536d438f</sys_scope>
        <sys_update_name>sys_script_fdf3cc4e47065110e292f2e7536d4348</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-10-02 18:28:29</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=fdf3cc4e47065110e292f2e7536d4348"/>
</record_update>
